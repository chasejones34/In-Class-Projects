USE constructco;

-- Problem 1
SELECT EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL
FROM EMPLOYEE
WHERE EMP_LNAME LIKE BINARY "Smith%";

-- Problem 2
SELECT PROJ_NAME, PROJ_VALUE, PROJ_BALANCE,
	   EMP_LNAME, EMP_FNAME, EMP_INITIAL,
       JOB.JOB_CODE, JOB_DESCRIPTION, JOB_CHG_HOUR
FROM PROJECT
JOIN EMPLOYEE ON PROJECT.EMP_NUM = EMPLOYEE.EMP_NUM
JOIN JOB ON EMPLOYEE.JOB_CODE = JOB.JOB_CODE
ORDER BY PROJ_VALUE;

-- Problem 3
SELECT PROJ_NAME, PROJ_VALUE, PROJ_BALANCE,
	   EMP_LNAME, EMP_FNAME, EMP_INITIAL,
       JOB.JOB_CODE, JOB_DESCRIPTION, JOB_CHG_HOUR
FROM PROJECT
JOIN EMPLOYEE ON PROJECT.EMP_NUM = EMPLOYEE.EMP_NUM
JOIN JOB ON EMPLOYEE.JOB_CODE = JOB.JOB_CODE
ORDER BY EMP_LNAME;

-- Problem 4
SELECT DISTINCT PROJ_NUM
FROM ASSIGNMENT
ORDER BY PROJ_NUM;

-- Problem 5
SELECT ASSIGN_NUM, EMP_NUM, PROJ_NUM, ASSIGN_CHARGE, (ASSIGN_CHG_HR * ASSIGN_HOURS) AS CALC
FROM ASSIGNMENT;

-- Problem 6
SELECT ASSIGNMENT.EMP_NUM, EMP_LNAME, ROUND(SUM(ASSIGN_HOURS),1) AS SumOfASSIGN_HOURS, SUM(ASSIGN_CHARGE) AS SumOfASSIGN_CHARGE
FROM ASSIGNMENT
JOIN EMPLOYEE ON ASSIGNMENT.EMP_NUM = EMPLOYEE.EMP_NUM
GROUP BY EMP_NUM
ORDER BY EMP_NUM;

-- Problem 7
SELECT PROJECT.PROJ_NUM, ROUND(SUM(ASSIGN_HOURS),1) AS SumOfASSIGN_HOURS, SUM(ASSIGN_CHARGE) AS SumOfASSIGN_CHARGE
FROM ASSIGNMENT
JOIN PROJECT ON ASSIGNMENT.PROJ_NUM = PROJECT.PROJ_NUM
GROUP BY PROJ_NUM;

-- Problem 8
SELECT ROUND(SUM(ASSIGN_HOURS),1) AS SumOfASSIGN_HOURS, SUM(ASSIGN_CHARGE) AS SumOfASSIGN_CHARGE
FROM ASSIGNMENT
ORDER BY SumOfASSIGN_HOURS;

-- SALECO --
USE saleco;

-- Problem 9
SELECT COUNT(*)
FROM INVOICE;

-- Problem 10
SELECT COUNT(*)
FROM CUSTOMER
WHERE CUS_BALANCE > 500;

-- Problem 11
SELECT COUNT(*)
FROM CUSTOMER
WHERE CUS_BALANCE > 500;

-- Problem 12
	-- Tables Needed: INVOICE, PRODUCT, LINE
SELECT CUS_CODE, I.INV_NUMBER, P_DESCRIPT, ROUND(LINE_UNITS) AS `Units Bought`, LINE_PRICE AS `Unit Price`, ROUND((LINE_PRICE * LINE_UNITS), 2) AS Subtotal
FROM INVOICE I
JOIN LINE L ON L.INV_NUMBER = I.INV_NUMBER
JOIN PRODUCT P ON P.P_CODE = L.P_CODE
ORDER BY CUS_CODE, INV_NUMBER, P_DESCRIPT;

-- Problem 13
SELECT I.CUS_CODE, C.CUS_BALANCE, ROUND(SUM(LINE_PRICE * LINE_UNITS), 2) AS `Total Purchases`
FROM INVOICE I
JOIN LINE L ON L.INV_NUMBER = I.INV_NUMBER
JOIN PRODUCT P ON P.P_CODE = L.P_CODE
JOIN CUSTOMER C ON C.CUS_CODE = I.CUS_CODE
GROUP BY C.CUS_CODE
ORDER BY C.CUS_CODE;

-- Problem 14
SELECT I.CUS_CODE, 
	   C.CUS_BALANCE, 
       ROUND(SUM(LINE_PRICE * LINE_UNITS), 2) AS `Total Purchases`,
       COUNT(L.INV_NUMBER) AS `Number Of Purchases`
FROM INVOICE I
JOIN LINE L ON L.INV_NUMBER = I.INV_NUMBER
JOIN PRODUCT P ON P.P_CODE = L.P_CODE
JOIN CUSTOMER C ON C.CUS_CODE = I.CUS_CODE
GROUP BY C.CUS_CODE
ORDER BY C.CUS_CODE;

-- Problem 15
 SELECT I.CUS_CODE, 
	   C.CUS_BALANCE, 
       ROUND(SUM(LINE_PRICE * LINE_UNITS), 2) AS `Total Purchases`,
       COUNT(L.INV_NUMBER) AS `Number Of Purchases`,
       ROUND(ROUND(SUM(LINE_PRICE * LINE_UNITS), 2) / COUNT(L.INV_NUMBER), 2) AS `Average Purchase Ammount`
FROM INVOICE I
JOIN LINE L ON L.INV_NUMBER = I.INV_NUMBER
JOIN PRODUCT P ON P.P_CODE = L.P_CODE
JOIN CUSTOMER C ON C.CUS_CODE = I.CUS_CODE
GROUP BY C.CUS_CODE
ORDER BY C.CUS_CODE;

-- Problem 16
SELECT INV_NUMBER, ROUND(SUM(LINE_PRICE*LINE_UNITS), 2) AS `Invoice Total`
FROM LINE
GROUP BY INV_NUMBER;

-- Problem 17
SELECT I.CUS_CODE, 
	   L.INV_NUMBER,
       ROUND(SUM(LINE_PRICE*LINE_UNITS), 2) AS `Invoice Total`
FROM LINE L
JOIN INVOICE I ON I.INV_NUMBER = L.INV_NUMBER
GROUP BY L.INV_NUMBER;

-- Problem 18
SELECT I.CUS_CODE, 
       COUNT(DISTINCT I.INV_NUMBER) AS `NUmber Of Invoices`,
       ROUND(SUM(LINE_PRICE * LINE_UNITS), 2) AS `Total Customer Purchases`
FROM INVOICE I
JOIN LINE L ON L.INV_NUMBER = I.INV_NUMBER
GROUP BY I.CUS_CODE;

-- Problem 19
SELECT SUM(NUMINVOICES) AS `Total Invoices`, 
	   SUM(TOTPURCH) AS `Total Sales`,
       MIN(TOTPURCH) AS `Minimum Customer Purchases`,
       MAX(TOTPURCH) AS `Maximum Customer Purchases`,
       ROUND(AVG(TOTPURCH), 2) AS `Average Customer Purchases`
FROM (SELECT I.CUS_CODE, C.CUS_BALANCE, ROUND(SUM(LINE_PRICE * LINE_UNITS), 2) AS TOTPURCH, COUNT(DISTINCT I.INV_NUMBER) AS NUMINVOICES
	FROM INVOICE I
	JOIN LINE L ON L.INV_NUMBER = I.INV_NUMBER
	JOIN PRODUCT P ON P.P_CODE = L.P_CODE
	JOIN CUSTOMER C ON C.CUS_CODE = I.CUS_CODE
	GROUP BY C.CUS_CODE
	ORDER BY C.CUS_CODE) RandomAliasNameBecauseMySQLIsPicky;

-- Problem 20
SELECT I.CUS_CODE,
	   C.CUS_BALANCE
FROM INVOICE I
JOIN CUSTOMER C ON C.CUS_CODE = I.CUS_CODE
GROUP BY I.CUS_CODE;

-- Problem 21
SELECT ROUND(MIN(C.CUS_BALANCE), 2) AS `Minimum Balance`,
       ROUND(MAX(C.CUS_BALANCE), 2) AS `Maximum Balance`,
       ROUND(AVG(C.CUS_BALANCE), 2) AS `Average Balance`
FROM CUSTOMER C
JOIN INVOICE I ON I.CUS_CODE = C.CUS_CODE
ORDER BY I.CUS_CODE;
-- Average function does not return proper value --

-- Problem 22
SELECT SUM(C.CUS_BALANCE) AS `Total Balances`,
       ROUND(MIN(C.CUS_BALANCE), 2) AS `Minimum Balance`,
       ROUND(MAX(C.CUS_BALANCE), 2) AS `Maximum Balance`,
       ROUND(AVG(C.CUS_BALANCE), 2) AS `Average Balance`
FROM CUSTOMER C;

-- Problem 23
SELECT C.CUS_CODE,
       C.CUS_BALANCE
FROM CUSTOMER C
WHERE NOT EXISTS
	(SELECT *
    FROM INVOICE
    WHERE C.CUS_CODE = INVOICE.CUS_CODE);

-- Problem 24
SELECT SUM(C.CUS_BALANCE) AS `Total Balances`,
       ROUND(MIN(C.CUS_BALANCE), 2) AS `Minimum Balance`,
       ROUND(MAX(C.CUS_BALANCE), 2) AS `Maximum Balance`,
       ROUND(AVG(C.CUS_BALANCE), 2) AS `Average Balance`
FROM CUSTOMER C
WHERE NOT EXISTS
	(SELECT *
    FROM INVOICE
    WHERE C.CUS_CODE = INVOICE.CUS_CODE);
    
-- Problem 25
SELECT P_DESCRIPT,
	   P_QOH,
       P_PRICE,
       ROUND(P_QOH * P_PRICE, 2) AS `Subtotal`
FROM PRODUCT
ORDER BY `Subtotal` DESC;

-- Problem 26
SELECT ROUND(SUM(P_QOH * P_PRICE), 2) AS `Total Value Of Inventory`
FROM PRODUCT;
